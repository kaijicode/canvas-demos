{"mappings":";;AAAA,QAAMA,4CAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,QAAMC,2CAAK,GAAGH,4CAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;AACAC,EAAAA,MAAM,CAACC,WAAP,GAAqBN,4CAAM,CAACO,KAA5B;AACAF,EAAAA,MAAM,CAACG,YAAP,GAAsBR,4CAAM,CAACS,MAA7B;AACAJ,EAAAA,MAAM,CAACF,KAAP,GAAeA,2CAAf;;AAEA,YAAUO,4CAAV,CAAiBC,SAAjB,EAA4B;AACxB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,IAAV,CAAeC,MAAnC,EAA2CF,CAAC,IAAI,CAAhD,EAAmD;AAC/C,YAAM;AACFG,QAAAA,GAAG,EAAEJ,SAAS,CAACE,IAAV,CAAeD,CAAf,CADH;AAEFI,QAAAA,KAAK,EAAEL,SAAS,CAACE,IAAV,CAAeD,CAAC,GAAG,CAAnB,CAFL;AAGFK,QAAAA,IAAI,EAAEN,SAAS,CAACE,IAAV,CAAeD,CAAC,GAAG,CAAnB,CAHJ;AAIFM,QAAAA,KAAK,EAAEP,SAAS,CAACE,IAAV,CAAeD,CAAC,GAAG,CAAnB;AAJL,OAAN;AAMH;AACJ;;AAED,WAASO,0CAAT,CAAcC,IAAd,EAAoBC,CAApB,EAAuB;AACnB,QAAIT,CAAC,GAAG,CAAR;AACA,UAAMU,KAAK,GAAG,EAAd;;AAEA,WAAOV,CAAC,GAAGS,CAAX,EAAc;AACTC,MAAAA,KAAK,CAACC,IAAN,CAAWH,IAAI,CAACI,IAAL,EAAX;AACAZ,MAAAA,CAAC,IAAI,CAAL;AACJ;;AAED,WAAOU,KAAP;AACH;;AAED,YAAUG,2CAAV,CAAgBtB,KAAhB,EAAuBI,KAAvB,EAA8BE,MAA9B,EAAsC;AAClC,UAAME,SAAS,GAAGR,KAAK,CAACuB,YAAN,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBnB,KAAzB,EAAgCE,MAAhC,CAAlB;AACA,UAAMkB,QAAQ,GAAGjB,4CAAM,CAACC,SAAD,CAAvB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,GAAGE,MAA5B,EAAoCG,CAAC,IAAIL,KAAzC,EAAgD;AAC5C,YAAMY,0CAAI,CAACQ,QAAD,EAAWpB,KAAX,CAAJ,CAAsBqB,GAAtB,CAA2BC,KAAD,IAAWA,KAAK,CAACC,KAA3C,CAAN;AACH;AACJ;;AAWD,WAASC,iDAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAAqC;AACjC,WAAOC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,KAApB,CAA2BC,KAAD,IAAWL,MAAM,CAACK,KAAD,CAAN,KAAkBJ,MAAM,CAACI,KAAD,CAA7D,CAAP;AACH,G,CAED;AACA;AACA;;;AACA,WAASC,oDAAT,CAAwBnC,KAAxB,EACwBG,WADxB,EAEwBE,YAFxB,EAGwB+B,SAAS,GAAG;AAACxB,IAAAA,GAAG,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,CAAhB;AAAmBC,IAAAA,IAAI,EAAE,CAAzB;AAA4BC,IAAAA,KAAK,EAAE;AAAnC,GAHpC,EAIwBsB,eAAe,GAAG;AAACzB,IAAAA,GAAG,EAAE,GAAN;AAAWC,IAAAA,KAAK,EAAE,GAAlB;AAAuBC,IAAAA,IAAI,EAAE,GAA7B;AAAkCC,IAAAA,KAAK,EAAE;AAAzC,GAJ1C,EAIyF;AACrF,UAAMS,QAAQ,GAAGF,2CAAK,CAACtB,KAAD,EAAQG,WAAR,EAAqBE,YAArB,CAAtB;AAEA,QAAIiC,IAAI,GAAGd,QAAQ,CAACH,IAAT,EAAX;AACA,QAAIkB,GAAG,GAAG,CAAV;;AACA,WAAO,CAACD,IAAI,CAACE,IAAb,EAAmB;AACf,UAAIF,IAAI,CAACX,KAAL,CAAWc,IAAX,CAAiBf,KAAD,IAAWE,iDAAW,CAACF,KAAD,EAAQU,SAAR,CAAtC,CAAJ,EAA+D;AAC3D;AACH;;AAEDE,MAAAA,IAAI,GAAGd,QAAQ,CAACH,IAAT,EAAP;AACAkB,MAAAA,GAAG,IAAI,CAAP;AACH;;AAEDD,IAAAA,IAAI,GAAGd,QAAQ,CAACH,IAAT,EAAP;AACA,QAAIqB,MAAM,GAAGH,GAAG,GAAG,CAAnB;;AACA,WAAO,CAACD,IAAI,CAACE,IAAb,EAAmB;AACf,UAAIF,IAAI,CAACX,KAAL,CAAWM,KAAX,CAAkBP,KAAD,IAAWE,iDAAW,CAACF,KAAD,EAAQW,eAAR,CAAvC,CAAJ,EAAsE;AAClE;AACH;;AAEDC,MAAAA,IAAI,GAAGd,QAAQ,CAACH,IAAT,EAAP;AACAqB,MAAAA,MAAM,IAAI,CAAV;AACH;;AAED,WAAO;AAACH,MAAAA,GAAD;AAAMG,MAAAA;AAAN,KAAP;AACH;;AAED,WAASC,0CAAT,GAAgB;AACZ;AACA3C,IAAAA,2CAAK,CAAC4C,SAAN,GAAkB,wBAAlB;AACA5C,IAAAA,2CAAK,CAAC6C,QAAN,CAAe,CAAf,EAAkB,CAAlB,EAAqBhD,4CAAM,CAACO,KAA5B,EAAmCP,4CAAM,CAACS,MAA1C,EAHY,CAKZ;;AACAN,IAAAA,2CAAK,CAAC4C,SAAN,GAAkB,kBAAlB;AACA5C,IAAAA,2CAAK,CAAC8C,IAAN,GAAa,gBAAb;AACA,UAAMC,IAAI,GAAG,4BAAb;AACA,UAAMC,OAAO,GAAGhD,2CAAK,CAACiD,WAAN,CAAkBF,IAAlB,CAAhB;AACA/C,IAAAA,2CAAK,CAACkD,QAAN,CAAeH,IAAf,EAAqB,CAAClD,4CAAM,CAACO,KAAP,GAAe4C,OAAO,CAAC5C,KAAxB,IAAiC,CAAtD,EAAyDP,4CAAM,CAACS,MAAP,GAAgB,CAAzE;AAEA,UAAM6C,IAAI,GAAGhB,oDAAc,CAACnC,2CAAD,EAAQH,4CAAM,CAACO,KAAf,EAAsBP,4CAAM,CAACS,MAA7B,CAA3B;AACA8C,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkBA,IAAI,CAACT,MAAL,GAAcS,IAAI,CAACZ,GAArC;AAEAvC,IAAAA,2CAAK,CAACsD,SAAN;AACAtD,IAAAA,2CAAK,CAACuD,WAAN,GAAoB,OAApB;AACAvD,IAAAA,2CAAK,CAACwD,MAAN,CAAa,EAAb,EAAiBL,IAAI,CAACZ,GAAtB;AACAvC,IAAAA,2CAAK,CAACyD,MAAN,CAAa,EAAb,EAAiBN,IAAI,CAACT,MAAtB;AACA1C,IAAAA,2CAAK,CAAC0D,MAAN;AACH;;AAEDf,EAAAA,0CAAI","sources":["./src/06-measure-text-height/index.js"],"sourcesContent":["const canvas = document.getElementById('canvas');\nconst scene = canvas.getContext('2d');\nwindow.canvasWidth = canvas.width;\nwindow.canvasHeight = canvas.height;\nwindow.scene = scene;\n\nfunction* pixels(imageData) {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n        yield {\n            red: imageData.data[i],\n            green: imageData.data[i + 1],\n            blue: imageData.data[i + 2],\n            alpha: imageData.data[i + 3],\n        }\n    }\n}\n\nfunction take(iter, n) {\n    let i = 0;\n    const items = [];\n\n    while (i < n) {\n         items.push(iter.next());\n         i += 1;\n    }\n\n    return items;\n}\n\nfunction* lines(scene, width, height) {\n    const imageData = scene.getImageData(0, 0, width, height);\n    const iterator = pixels(imageData);\n\n    for (let i = 0; i < width * height; i += width) {\n        yield take(iterator, width).map((pixel) => pixel.value);\n    }\n}\n\nfunction readNthPixel(imageData, nth) {\n    return {\n        red: imageData.data[nth * 4],\n        green: imageData.data[nth * 4 + 1],\n        blue: imageData.data[nth * 4 + 2],\n        alpha: imageData.data[nth * 4 + 3],\n    }\n}\n\nfunction isSamePixel(pixel1, pixel2) {\n    return Object.keys(pixel1).every((color) => pixel1[color] === pixel2[color]);\n}\n\n// read pixels line by line\n// calculate top by finding pixels matching the text color\n// calculate bottom by finding the pixels matching the background color\nfunction calcTextBounds(scene,\n                        canvasWidth,\n                        canvasHeight,\n                        textColor = {red: 0, green: 0, blue: 0, alpha: 255},\n                        backgroundColor = {red: 255, green: 255, blue: 255, alpha: 255}) {\n    const iterator = lines(scene, canvasWidth, canvasHeight);\n\n    let line = iterator.next();\n    let top = 0;\n    while (!line.done) {\n        if (line.value.some((pixel) => isSamePixel(pixel, textColor))) {\n            break;\n        }\n\n        line = iterator.next();\n        top += 1;\n    }\n\n    line = iterator.next();\n    let bottom = top + 1;\n    while (!line.done) {\n        if (line.value.every((pixel) => isSamePixel(pixel, backgroundColor))) {\n            break;\n        }\n\n        line = iterator.next();\n        bottom += 1;\n    }\n\n    return {top, bottom};\n}\n\nfunction draw() {\n    // background\n    scene.fillStyle = 'rgba(255, 255, 255, 1)'\n    scene.fillRect(0, 0, canvas.width, canvas.height);\n\n    // text\n    scene.fillStyle = 'rgba(0, 0, 0, 1)';\n    scene.font = '16px monospace';\n    const text = 'abcdefghijklmnopqrstuvwxyz';\n    const metrics = scene.measureText(text);\n    scene.fillText(text, (canvas.width - metrics.width) / 2, canvas.height / 2);\n\n    const rect = calcTextBounds(scene, canvas.width, canvas.height);\n    console.log(rect, rect.bottom - rect.top);\n\n    scene.beginPath();\n    scene.strokeStyle = 'green';\n    scene.moveTo(10, rect.top);\n    scene.lineTo(10, rect.bottom);\n    scene.stroke();\n}\n\ndraw();"],"names":["canvas","document","getElementById","scene","getContext","window","canvasWidth","width","canvasHeight","height","pixels","imageData","i","data","length","red","green","blue","alpha","take","iter","n","items","push","next","lines","getImageData","iterator","map","pixel","value","isSamePixel","pixel1","pixel2","Object","keys","every","color","calcTextBounds","textColor","backgroundColor","line","top","done","some","bottom","draw","fillStyle","fillRect","font","text","metrics","measureText","fillText","rect","console","log","beginPath","strokeStyle","moveTo","lineTo","stroke"],"version":3,"file":"06-measure-text-height.8f73cefb.js.map"}